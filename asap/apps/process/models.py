#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
- process.models
~~~~~~~~~~~~~~

- This file contains the Process service models that will map into DB tables and will store Process data
  and Process-Resource Relation
 """

# future
from __future__ import unicode_literals

# django
from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.contrib.postgres.fields import JSONField

# 3rd party
import uuid


class Process(models.Model):
    """
    Every Process is connected with a resource and itself it is blind.
          For every action it asks his Resource for instructions.
    """

    # Attributes
    name = models.CharField(
            _('Process Name'),
            max_length=30,
            help_text=_('Required. 30 characters or fewer.'),
    )
    code = models.CharField(
            _('Process code'),
            max_length=30,
            unique=True,
            help_text=_('Required & Unique. 30 characters or fewer.'),
    )
    resource_token = models.CharField(
                        _('Resource Token'),
                        max_length=30,
                        null=True,
                        blank=True,
                        help_text=_('Toke of Resource to which this Process belongs too.')
    )
    created_at = models.DateTimeField(
                 _('created at'),
                 auto_now_add=True,
                 db_index=True,
                 editable=False,
                 help_text = _('Non-editable, to be generated by system itself.'),
    )

    # Meta
    class Meta:
        verbose_name = _("Process")
        verbose_name_plural = _("Processes")
        ordering = ["-created_at"]

    # Functions
    def __str__(self):
        return "Resource {0}".format(self.code)

class ProcessLocker(models.Model):
    """
        Process Locker is the collection of Processes which will be called based on some rules.
        Every Locker will have a token which will be shared with Widget.
    """

    # Attributes
    name = models.CharField(
            _('Process Locker Name'),
            max_length=30,
            help_text=_('Required. 30 characters or fewer.'),
    )
    rules = JSONField(
             _('Process rules'),
             help_text=_('Rules config, tells us which process will be called based on what rules.'),
    )
    token = models.UUIDField(
        _('Resource token'),
        null=True,
        blank=True,
        unique=True,
        editable=False,
        help_text=_('Non-editable, to be generated by system itself and only when is_publish=True ,\
                    means when Process Locker is Published.'),
    )
    is_publish = models.BooleanField(
                    _('Publish Locker'),
                    default=False,
                    help_text=_('Only Publish When you are sure. Once published Lolcker cannot be updated.')
    )
    created_at = models.DateTimeField(
                 _('created at'),
                 auto_now_add=True,
                 db_index=True,
                 editable=False,
                 help_text = _('Non-editable, to be generated by system itself.'),
    )

    # Meta
    class Meta:
        verbose_name = _("Process`s Locker")
        verbose_name_plural = _("Process`s Locker")
        ordering = ["-created_at"]

    # Functions
    def __str__(self):
        return "Process Locker {0}".format(self.name)

    def save(self, *args, **kwargs):
        """Override save() method to check if Locker is published if yes, then generate token for locker

        """
        if self.is_publish is True:
            self.token = str(uuid.uuid4())
        return super(ProcessLocker, self).save(*args, **kwargs)




