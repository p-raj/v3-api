#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
Runtime Locker provides an interface to manage multiple runtimes
corresponding to a single token.

The token/identifier might be exchanged with various Veris Services. Currently Organizations.
The Organization Service may allow a single runtime to be accessed by multiple user.
Runtime should be able to gather additional data about the requesting party (user).

We need to implement a functionality like [Referer] Header of HTTP Protocol.

[Referer]: https://www.w3.org/Protocols/HTTP/HTRQ_Headers.html#z14

"""

import uuid

from django.contrib import admin
from django.db import models
from django.utils.translation import ugettext_lazy as _

from asap.apps.runtime.models.runtime import Runtime
from asap.core.models import Authorable, Timestampable


class RuntimeLocker(Authorable, Timestampable, models.Model):
    uuid = models.UUIDField(
        default=uuid.uuid4,
        editable=False,
        help_text=_('Non-editable, to be generated by system itself.'),
    )

    # this uuid may be used to access many runtimes
    # associated with it
    # each runtime may have a unique token associated to it
    # we'll do that in the through mapping
    runtimes = models.ManyToManyField(Runtime)

    def __str__(self):
        return '{0}'.format(self.uuid)


@admin.register(RuntimeLocker)
class RuntimeLockerAdmin(admin.ModelAdmin):
    raw_id_fields = ['author']
    readonly_fields = ['uuid']
