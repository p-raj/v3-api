#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
Widget Locker provides an interface to manage multiple widgets
corresponding to a single identifier.

The identifier will exchanged with the Veris Runtime service that
may allow multiple runtimes to access the same set of widgets.

Each Widget however should be able identify the `Entity` accessing itself.

We need to implement a functionality like [Referer] Header of HTTP Protocol.

[Referer]: https://www.w3.org/Protocols/HTTP/HTRQ_Headers.html#z14

"""

import uuid

from django.contrib import admin
from django.db import models
from django.utils.translation import ugettext_lazy as _

from asap.apps.widgets.models.widget import Widget
from asap.core.models import Authorable, Timestampable


class WidgetLocker(Authorable, Timestampable, models.Model):
    uuid = models.UUIDField(
        default=uuid.uuid4,
        editable=False,
        help_text=_('Non-editable, to be generated by system itself.'),
    )

    # this uuid may be used to access multiple widgets
    # associated with it
    # each widget may have a unique token associated to it
    # we'll do that in the through mapping
    widgets = models.ManyToManyField(Widget)

    def __str__(self):
        return '{0}'.format(self.uuid)


@admin.register(WidgetLocker)
class WidgetLockerAdmin(admin.ModelAdmin):
    raw_id_fields = ['author']
    readonly_fields = ['uuid']
