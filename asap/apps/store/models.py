#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
-store.models
~~~~~~~~~~~~~~


-This file contains the Resource models that will map into DB tables and will store data of Resources
 """

# future
from __future__ import unicode_literals

# 3rd party
import uuid, bleach

# django
from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.contrib.postgres.fields import JSONField
from django.core.exceptions import ValidationError

# local
from asap.apps.utils import validator


class Resource(models.Model):
    """
    Resource is any service which will be either Provided by Veris or any 3rd party.
    Resource cannot be called independently , to access any resource it must first bound with a process.

    Note:
        - name & upstream_url will be unique together so that no Admin can add two upstraem url with
          same name. Because that will be very confusing.
    """

    # Attributes
    name = models.CharField(
            _('resource name'),
            max_length=30,
            help_text=_('Required. 30 characters or fewer.'),
    )
    upstream_url = models.URLField(
                    _('upstream url of resource.'),
                    max_length=200,
                    help_text=_('Required. 200 characters or fewer.'),
    )
    schema = JSONField(
             _('Resource schema'),
             help_text=_('Resource swagger client schema.'),
    )
    token = models.UUIDField(
            _('Resource token'),
            unique=True,
            default=uuid.uuid4,
            editable=False,
            help_text = _('Non-editable, to be generated by system itself.This token to be bind with process\
             Process will access Resource with the help of this token'),
    )
    created_at = models.DateTimeField(
                 _('created at'),
                 auto_now_add=True,
                 db_index=True,
                 editable=False,
                 help_text = _('Non-editable, to be generated by system itself.'),
    )

    # Meta
    class Meta:
        verbose_name = _("Resource")
        verbose_name_plural = _("Resources")
        ordering = ["-created_at"]
        get_latest_by = "created_at"
        unique_together = ("name", "upstream_url", )

    # Functions
    def __str__(self):
        return "Resource {0}".format(self.name)

    def clean(self):
        """Validate models field data or clean fields data so that no bad strings can cause any problem.
        """

        # reject any malicious input string
        bad_strings_json = validator._get_bad_strings_json().get('rejected_list')

        if self.name in bad_strings_json:
            raise ValidationError(_('malicious input string sent in name. {0}'.format(self.name)))

        # validate char fields data length
        if len(self.name) > 30:
            raise ValidationError({'name': _('Length of name cannot be greater then 30')})

        # clean or bleach fields data
        self.name = bleach.clean(self.name)

    def save(self, **kwargs):
        self.clean()
        return super(Resource, self).save(**kwargs)