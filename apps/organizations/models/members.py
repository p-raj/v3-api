"""
Any Organization without members might only be used for testing purposes
or for evaluating Veris platform
just like we evaluated Auth0, Okta & many others :D
"""
from django.contrib import admin
from django.db import models

from .organizations import Organization


class Member(models.Model):
    """
    Member model should be seen as a through mapping between
    users from the authentication server and the organizations on this server.

    * A ``User`` may be added as a member for multiple Organizations,
      and may have different ``roles`` assigned. We'll see ``roles`` later :)
    """
    # lets not have a foreign key here since we know that authentication needs to
    # be handled by a different server all along
    # the user_id here represents the unique user id given to the user by the remote server
    # this id must be used to query the remote server regarding user details
    # the max_length should match the length of the ids generated by the remote server
    user_id = models.CharField(max_length=128, null=False, blank=False)

    # we can have a foreign key here,
    # it seems safe to assume these two resources will always be on the same server
    # no point in keeping members after the organization has been deleted
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE)

    # let's keep the date member was added,
    # although the name says date_joined
    # TODO
    # we'll see what to do with this
    date_joined = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return '{user} is a member of {organization}'.format(**{
            'user': self.user_id,
            'organization': self.organization
        })


class MemberAdmin(admin.ModelAdmin):
    raw_id_fields = ['organization']


admin.site.register(Member, MemberAdmin)
